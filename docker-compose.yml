services:
    postgres:
        image: postgres:16-alpine
        container_name: pokemon-db
        environment:
            POSTGRES_DB: pokemon_db
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
        ports:
            - '5434:5432'
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./init-test-db.sql:/docker-entrypoint-initdb.d/init-test-db.sql
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U postgres']
            interval: 10s
            timeout: 5s
            retries: 3
        networks:
            - pokemon-network

    app:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: pokemon-api
        environment:
            NODE_ENV: production
            DB_HOST: postgres
            DB_PORT: 5432
            DB_NAME: pokemon_db
            DB_USER: postgres
            DB_PASSWORD: postgres
            JWT_SECRET: test
            PORT: 3333
        ports:
            - '3333:3333'
        depends_on:
            postgres:
                condition: service_healthy
        networks:
            - pokemon-network
        command: >
            sh -c "
            echo 'Starting Pokemon API' &&
            echo 'Running migrations' &&
            npx mikro-orm migration:up &&
            echo 'Seeding database' &&
            npx mikro-orm seeder:run &&
            echo 'Setup complete' &&
            node dist/index.js
            "
        restart: unless-stopped
        healthcheck:
            test: ['CMD-SHELL', 'curl -f http://localhost:3333/health || exit 1']
            interval: 30s
            timeout: 3s
            start_period: 40s
            retries: 3

networks:
    pokemon-network:
        driver: bridge

volumes:
    postgres_data:
